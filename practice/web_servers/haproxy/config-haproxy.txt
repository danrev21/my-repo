
global:
  определяет глобальные параметры для всего экземпляра HAProxy.
defaults:
  определяет значения по умолчанию для всех прокси (proxy), если они не переопределены 
  в их собственных секциях. Вот список наиболее распространенных параметров, которые 
  могут быть установлены в секции "defaults"
frontend:
  для определения параметров, которые применяются к входящему трафику. 
  Фронтэнд обрабатывает входящие соединения от клиентов и определяет, какие 
  действия предпринять с этими соединениями, например, маршрутизация их к
  соответствующему бэкэнду или принятие решения об их отбрасывании
backend:
  для определения параметров и настроек для бэкенд-серверов, к которым 
  HAProxy направляет запросы после их обработки на уровне frontend. 
  В этой секции определяются сервера, порты и другие параметры, связанные с бэкенд-инфраструктурой.
listen:
  используется для настройки прослушивающих портов, на которых HAProxy принимает входящие соединения 
  от клиентов. Эти соединения затем могут быть маршрутизированы на соответствующие frontend и backend 
  секции в зависимости от правил маршрутизации
userlist:
  используется для определения пользователей и их аутентификационных данных, которые могут быть 
  использованы для ограничения доступа к различным частям HAProxy, таким как фронтенды или 
  бэкенды, с использованием базовой HTTP-аутентификации
peers:
  для настройки параметров и определения параметров кластера peer. Этот кластер используется для 
  обмена состоянием между разными экземплярами HAProxy, что позволяет им работать в режиме 
  высокой доступности и обеспечивать отказоустойчивость.
mailers:
cache:
program:

Секция "global" в конфигурационном файле HAProxy определяет глобальные параметры для всего экземпляра HAProxy. Вот некоторые из наиболее распространенных параметров, которые могут быть установлены в секции "global":

daemon: Устанавливает HAProxy в режим демона.
maxconn: Определяет максимальное количество одновременных соединений, которые HAProxy может обслуживать.
log: Указывает файл журнала для записи сообщений о работе HAProxy.
log-send-hostname: Включает или отключает отправку имени хоста в записях журнала.
pidfile: Указывает файл, в который будет записываться идентификатор процесса HAProxy.
user: Устанавливает пользователя, от имени которого будет работать HAProxy.
group: Устанавливает группу, от имени которой будет работать HAProxy.
stats socket: Позволяет настроить сокет для доступа к статистике HAProxy через командную строку.
nbproc: Устанавливает количество процессов для запуска HAProxy.
cpu-map: Позволяет настраивать соответствие процессоров процессам HAProxy.
tune. параметры*: Настройки для определенной производительности или поведения, например, tune.bufsize, tune.maxaccept, и т.д.
stats timeout: Определяет время ожидания для статистических данных, включая соединения к сокету статистики.
ssl-default-bind-options: Опции SSL по умолчанию для привязки. Например, "no-sslv3" для отключения поддержки SSLv3 по умолчанию.
ssl-default-bind-ciphers: Устанавливает список шифров, доступных для SSL-соединений по умолчанию.
ssl-default-server-options: Опции SSL по умолчанию для серверов.
ssl-default-server-ciphers: Устанавливает список шифров, доступных для SSL-соединений с сервером по умолчанию.
server-state-base: Устанавливает базовое значение для server-state.
server-state-file: Устанавливает файл, в котором будет храниться состояние серверов.
lua-load: Загружает Lua-скрипты в HAProxy для выполнения различных действий.
lua-prepend-path / lua-load / lua-load-last: Определяют пути поиска для скриптов Lua.

--------------------------------------------------------------------------------------------

Секция "defaults" в конфигурационном файле HAProxy определяет значения по умолчанию для всех прокси (proxy), если они не переопределены в их собственных секциях. Вот список наиболее распространенных параметров, которые могут быть установлены в секции "defaults":

mode: Определяет режим работы HAProxy: TCP (tcp), HTTP (http), или Health (health).
log: Указывает файл журнала для записи сообщений о работе HAProxy.
option: Опции, которые применяются по умолчанию ко всем прокси. Например, "option forwardfor" для добавления заголовка X-Forwarded-For.
timeout: Задает временные интервалы по умолчанию для различных операций, таких как соединение, чтение, отправка и т.д.
retries: Количество попыток повтора соединения с сервером в случае неудачи.
balance: Определяет алгоритм балансировки нагрузки по умолчанию, например, "roundrobin" или "leastconn".
maxconn: Определяет максимальное количество одновременных соединений для каждого сервера в группе по умолчанию.
errorfile: Указывает файл для отображения пользовательских страниц ошибок.
http-request / http-response: Позволяет задавать правила обработки HTTP-запросов и ответов.
default-server: Определяет параметры сервера по умолчанию для групп серверов.
option forwardfor: Добавляет заголовок X-Forwarded-For к HTTP-запросам, чтобы передать оригинальный IP-адрес клиента.
option httpchk: Определяет HTTP-запрос для проверки состояния сервера.
http-check expect: Определяет ожидаемый HTTP-ответ от сервера при выполнении проверки состояния.
option tcplog: Включает логирование TCP-соединений для прокси.
option http-server-close: Закрывает HTTP-соединение после завершения передачи ответа сервером.
option httpclose: Аналогично предыдущему, но применяется только для клиентских соединений.
option http-use-proxy-header: Использует HTTP-заголовки прокси для определения протокола и хоста.
option redispatch: Перенаправляет трафик на другой сервер в случае отказа текущего.
option abortonclose: Прерывает соединение, если клиент закрывает его до завершения HTTP-запроса.
option contstats: Разрешает непрерывное сбор статистики.
option dontlognull: Не записывает в журнал запросы без контента.
option http-server-close: Закрывает соединение с сервером после каждого запроса.
option prefer-last-server: Предпочитает последний сервер при балансировке.
option socket-stats: Позволяет просматривать статистику через UNIX-сокет.
option tcpka: Включает keep-alive для TCP-соединений.
option accept-invalid-http-request: Принимает недействительные HTTP-запросы.
option accept-invalid-http-response: Принимает недействительные HTTP-ответы.
option splice-auto: Автоматически использует splice для передачи данных между сетевыми сокетами.
option logasap: Немедленно записывает запросы в журнал, даже если они еще не завершены.
option tcp-smart-accept: Использует алгоритмы, чтобы умно принимать соединения, основываясь на текущей загрузке системы.
option http-keep-alive: Включает поддержку HTTP Keep-Alive для повторного использования TCP-соединений.
option http-tunnel: Позволяет использовать HTTP-туннелирование.
option redis-check: Позволяет проверять доступность серверов Redis при балансировке нагрузки.
option transparent: Включает режим прозрачного проксирования (Transparent Proxying).
timeout client-fin: Устанавливает таймаут для завершения соединения клиента.
timeout check: Устанавливает таймаут для проверки состояния сервера.
timeout http-keep-alive: Устанавливает таймаут для HTTP Keep-Alive соединений.
timeout queue: Устанавливает максимальное время ожидания в очереди.
timeout server-fin: Устанавливает таймаут для завершения соединения сервера.
timeout tunnel: Устанавливает таймаут для туннельных соединений.

----------------------------------------------------------------------
Секция "frontend" в конфигурационном файле HAProxy используется для определения параметров, которые применяются к входящему трафику. Фронтэнд обрабатывает входящие соединения от клиентов и определяет, какие действия предпринять с этими соединениями, например, маршрутизация их к соответствующему бэкэнду или принятие решения об их отбрасывании.

-позволяют более гибко управлять и обрабатывать HTTP-запросы на уровне frontend в HAProxy, что обеспечивает возможность более тонкой настройки поведения сервера в соответствии с требованиями приложения.

bind: Определяет IP-адрес и порт, на котором frontend будет прослушивать входящие соединения.
mode: Устанавливает режим работы frontend, например, "http" для HTTP-трафика или "tcp" для общего TCP-трафика.
option: Устанавливает опции для frontend, такие как "option forwardfor" или "option http-server-close".
default_backend: Указывает backend по умолчанию для обработки запросов, которые не соответствуют ни одному из условий ACL.
acl: Определяет списки управления доступом (Access Control Lists), используемые для маршрутизации запросов на разные backend в зависимости от условий.
option forwardfor: Добавляет заголовок X-Forwarded-For к исходящим запросам, содержащим IP-адрес клиента.
option http-server-close: Закрывает соединение с сервером после завершения обработки каждого HTTP-запроса.
option http-keep-alive: Включает поддержку HTTP Keep-Alive для повторного использования соединений.
option httpclose: Закрывает соединение после завершения каждого HTTP-запроса.
option tcplog: Включает логирование TCP-соединений для frontend.
timeout client: Устанавливает таймаут для запросов от клиента к frontend.
timeout client-fin: Устанавливает таймаут для завершения соединения с клиентом.
timeout http-request: Устанавливает таймаут для получения HTTP-запроса от клиента.
timeout http-keep-alive: Устанавливает таймаут для HTTP Keep-Alive соединений.
timeout server: Устанавливает таймаут для подключения к backend серверу.
timeout server-fin: Устанавливает таймаут для завершения соединения с backend сервером.
use_backend: Маршрутизирует запросы на указанный backend в зависимости от условий ACL.
default_backend: Определяет backend, который будет использоваться по умолчанию для обработки запросов, если ни одно из условий ACL не соответствует.
acl: Позволяет определить списки управления доступом (Access Control Lists), используемые для маршрутизации запросов на разные backend в зависимости от условий, таких как IP-адрес клиента, заголовки запроса и другие параметры.
use_backend: Маршрутизирует запросы на указанный backend в зависимости от условий ACL.
http-request: Позволяет определять действия, которые должны быть выполнены перед обработкой HTTP-запроса, например, добавление или удаление заголовков.
http-response: Позволяет определять действия, которые должны быть выполнены перед отправкой HTTP-ответа клиенту, такие как добавление заголовков или изменение кода состояния.
bind-process: Позволяет привязать frontend к определенным процессорам, если в настройках HAProxy используется многопроцессорный режим работы.
log-format: Позволяет настраивать формат журнальных записей для frontend.
capture request header: Позволяет захватывать значения определенных заголовков из HTTP-запроса.
capture response header: Позволяет захватывать значения определенных заголовков из HTTP-ответа.
monitor-uri: Определяет URI, который HAProxy будет проверять для определения доступности сервера.
monitor fail: Устанавливает условие, при котором сервер будет считаться недоступным после неудачной проверки.
monitor interval: Устанавливает интервал между проверками доступности сервера.
monitor-net: Устанавливает параметры сетевого соединения для проверки доступности сервера.
http-send-name-header: Определяет, будет ли HAProxy отправлять заголовок "Host" в запросе HTTP/1.0, если клиент не отправил его.
http-send-proxy-header: Определяет, будет ли HAProxy отправлять заголовок "Proxy-Authorization" в запросе HTTP/1.0, если клиент не отправил его.
http-use-proxy-header: Использует заголовки прокси для определения протокола и хоста.
http-send-hdr-name: Добавляет указанный заголовок к исходящим HTTP-запросам.
http-send-hdr-val: Добавляет указанное значение к исходящим HTTP-заголовкам.
http-request set-header: Устанавливает указанный заголовок в запросе перед его отправкой на сервер.
http-request del-header: Удаляет указанный заголовок из запроса перед его отправкой на сервер.
http-request add-header: Добавляет указанный заголовок к запросу перед его отправкой на сервер.
http-response set-header: Устанавливает указанный заголовок в ответе перед его отправкой клиенту.
http-response del-header: Удаляет указанный заголовок из ответа перед его отправкой клиенту.
http-response add-header: Добавляет указанный заголовок к ответу перед его отправкой клиенту.
http-response set-status: Устанавливает HTTP-статус ответа перед его отправкой клиенту.
http-response allow: Разрешает отправку ответа клиенту.
http-response deny: Отклоняет отправку ответа клиенту.
http-request redirect: Перенаправляет запрос на указанный URL.
http-request deny: Отклоняет запрос от клиента.
http-request allow: Разрешает выполнение запроса от клиента.
http-response capture cookie: Позволяет захватывать значения указанных кук из HTTP-ответа.
http-response capture len: Задает максимальную длину захваченных данных в байтах.
http-response capture id: Задает идентификатор для захватываемого содержимого.
http-response capture len header: Задает максимальную длину захваченных данных из заголовков HTTP-ответа.
http-response capture len body: Задает максимальную длину захваченных данных из тела HTTP-ответа.
http-request capture cookie: Позволяет захватывать значения указанных кук из HTTP-запроса.
http-request capture len: Задает максимальную длину захваченных данных в байтах из HTTP-запроса.
http-request capture id: Задает идентификатор для захватываемого содержимого из HTTP-запроса.
http-request capture len header: Задает максимальную длину захваченных данных из заголовков HTTP-запроса.
http-request capture len body: Задает максимальную длину захваченных данных из тела HTTP-запроса.
http-response add-header X-Frame-Options: Добавляет HTTP-заголовок "X-Frame-Options" к ответу для защиты от атак clickjacking.
http-response add-header X-XSS-Protection: Добавляет HTTP-заголовок "X-XSS-Protection" для защиты от атак Cross-Site Scripting (XSS).
http-response add-header Strict-Transport-Security: Добавляет HTTP-заголовок "Strict-Transport-Security" для обеспечения безопасного соединения через HTTPS.
http-response set-cookie: Устанавливает значение указанного cookie в HTTP-ответе.
http-request set-cookie: Устанавливает значение указанного cookie в HTTP-запросе.
http-response set-headerifempty: Устанавливает указанный заголовок в ответе, если он отсутствует.
http-response set-log-level: Устанавливает уровень журналирования для конкретных HTTP-ответов.
http-response set-mark: Устанавливает метку для конкретных HTTP-ответов.
http-response set-nice: Устанавливает приоритет для обработки ответов HTTP.
http-response set-status reason: Устанавливает причину HTTP-статуса ответа.
http-response silent-drop: Принимает решение о безмолвном отбрасывании ответа без его обработки.
http-response track-sc0: Отслеживает статистику соединений для указанного значения.
http-response unset-header: Удаляет указанный заголовок из HTTP-ответа.
http-response use-service: Указывает на сервис, который будет использоваться для обработки HTTP-ответов.
http-request use-service: Указывает на сервис, который будет использоваться для обработки HTTP-запросов.
http-request silent-drop: Принимает решение о безмолвном отбрасывании HTTP-запроса без его обработки.
http-request set-log-level: Устанавливает уровень журналирования для конкретных HTTP-запросов.
http-request set-mark: Устанавливает метку для конкретных HTTP-запросов.
http-request set-nice: Устанавливает приоритет для обработки HTTP-запросов.
http-request set-status reason: Устанавливает причину HTTP-статуса ответа на запрос.
http-request unset-header: Удаляет указанный заголовок из HTTP-запроса.
http-request set-dst-port: Устанавливает порт назначения для HTTP-запроса.
http-request set-dst-ip: Устанавливает IP-адрес назначения для HTTP-запроса.
http-request set-src-port: Устанавливает порт отправителя для HTTP-запроса.
http-request set-src-ip: Устанавливает IP-адрес отправителя для HTTP-запроса.
http-request replace-header: Заменяет значение указанного заголовка в HTTP-запросе новым значением.
http-request replace-uri: Заменяет URI запроса на указанный URI.
http-request redirect location: Перенаправляет HTTP-запрос на указанный URL.
http-request deny if: Отклоняет HTTP-запрос, если выполняется указанное условие.
http-request allow if: Разрешает HTTP-запрос, если выполняется указанное условие.
http-request set-dst-port-fallback: Устанавливает порт назначения для HTTP-запроса, если предыдущие правила не применились.
http-request set-dst-ip-fallback: Устанавливает IP-адрес назначения для HTTP-запроса, если предыдущие правила не применились.
http-request set-src-port-fallback: Устанавливает порт отправителя для HTTP-запроса, если предыдущие правила не применились.
http-request set-src-ip-fallback: Устанавливает IP-адрес отправителя для HTTP-запроса, если предыдущие правила не применились.
http-request lua: Позволяет выполнять пользовательский Lua-скрипт для обработки HTTP-запроса.
http-request expect-continue: Активирует поддержку ожидания продолжения запроса от клиента перед отправкой данных.
http-request capture len cookie: Задает максимальную длину захватываемых данных из cookie в HTTP-запросе.
http-request capture len method: Задает максимальную длину захватываемых данных из метода HTTP-запроса.
http-request capture len uri: Задает максимальную длину захватываемых данных из URI в HTTP-запросе.
http-request capture len version: Задает максимальную длину захватываемых данных из версии протокола в HTTP-запросе.
http-request capture len req.hdr: Задает максимальную длину захватываемых данных из заголовков в HTTP-запросе.
http-request capture len req.body: Задает максимальную длину захватываемых данных из тела запроса в HTTP-запросе.
http-request capture len req.method: Задает максимальную длину захватываемых данных из метода HTTP-запроса.
http-request capture len req.uri: Задает максимальную длину захватываемых данных из URI в HTTP-запросе.
http-request capture len req.version: Задает максимальную длину захватываемых данных из версии протокола в HTTP-запросе.
http-request capture len req.hdr(Content-Length): Задает максимальную длину захватываемых данных из заголовка Content-Length в HTTP-запросе.
http-request capture len req.body(0): Задает максимальную длину захватываемых данных из тела запроса HTTP-запроса.

---------------------------------------------------------------------------
Секция "backend" в конфигурационном файле HAProxy используется для определения параметров и настроек для бэкенд-серверов, к которым HAProxy направляет запросы после их обработки на уровне frontend. В этой секции определяются сервера, порты и другие параметры, связанные с бэкенд-инфраструктурой.

-обеспечивают более тонкую настройку обработки HTTP-запросов и ответов на уровне бэкенд-серверов в HAProxy, включая манипуляции с заголовками, куками, URI и другими аспектами данных, передаваемых между клиентом и сервером.
-позволяют гибко управлять захватом и обработкой данных из HTTP-ответов от бэкенд-серверов в HAProxy, что может быть полезно для отладки, мониторинга и анализа производительности. 

balance: Определяет метод балансировки нагрузки между серверами бэкенда (например, roundrobin, leastconn, source).
mode: Устанавливает режим работы бэкенда (например, http, tcp).
option: Устанавливает опции для бэкенда.
server: Определяет конкретные серверы и их параметры в бэкенде.
timeout connect: Устанавливает таймаут для подключения к серверу бэкенда.
timeout server: Устанавливает таймаут для ответа от сервера бэкенда.
timeout tunnel: Устанавливает таймаут для туннелирования соединения.
option httpchk: Определяет HTTP-запрос, который будет использоваться для проверки доступности серверов бэкенда.
http-check expect: Устанавливает ожидаемый HTTP-код ответа для успешной проверки доступности серверов.
http-check disable-on-404: Отключает сервер, если он возвращает HTTP-код 404 на запрос проверки доступности.
source: Устанавливает исходный IP-адрес для инициирования соединений к серверам бэкенда.
option redispatch: Перенаправляет запросы к другим серверам в случае отказа текущего сервера.
option http-server-close: Закрывает соединение с бэкендом после завершения каждого HTTP-запроса.
option httpclose: Закрывает соединение с бэкендом после завершения каждого HTTP-запроса.
option tcplog: Включает логирование TCP-соединений для бэкенда.
option ssl-hello-chk: Использует SSL Client Hello для проверки доступности SSL бэкенд-серверов.
http-request set-header X-Forwarded-Port: Устанавливает заголовок X-Forwarded-Port перед отправкой запроса на бэкенд.
http-request set-header X-Forwarded-Proto: Устанавливает заголовок X-Forwarded-Proto перед отправкой запроса на бэкенд.
http-request set-header X-Forwarded-For: Устанавливает заголовок X-Forwarded-For перед отправкой запроса на бэкенд.
http-request add-header: Добавляет указанный заголовок к HTTP-запросу перед отправкой на бэкенд.
http-request del-header: Удаляет указанный заголовок из HTTP-запроса перед отправкой на бэкенд.
http-request replace-header: Заменяет значение указанного заголовка в HTTP-запросе перед отправкой на бэкенд.
errorfile: Определяет файл, который будет отправлен клиенту в случае ошибки на стороне бэкенда.
http-request set-method: Устанавливает HTTP-метод для запросов перед отправкой на бэкенд.
http-request set-uri: Устанавливает URI для запросов перед отправкой на бэкенд.
http-response set-header: Устанавливает указанный заголовок в HTTP-ответе от бэкенда перед его отправкой клиенту.
http-response del-header: Удаляет указанный заголовок из HTTP-ответа от бэкенда перед его отправкой клиенту.
http-response replace-header: Заменяет значение указанного заголовка в HTTP-ответе от бэкенда перед его отправкой клиенту.
http-response set-cookie: Устанавливает значение указанного cookie в HTTP-ответе от бэкенда перед его отправкой клиенту.
http-response add-header: Добавляет указанный заголовок к HTTP-ответу от бэкенда перед его отправкой клиенту.
http-response capture cookie: Позволяет захватывать значения указанных кук из HTTP-ответа от бэкенда.
http-response capture len: Задает максимальную длину захватываемых данных из HTTP-ответа от бэкенда.
http-response capture id: Задает идентификатор для захватываемого содержимого из HTTP-ответа от бэкенда.
http-response capture len header: Задает максимальную длину захватываемых данных из заголовков HTTP-ответа от бэкенда.
http-response capture len body: Задает максимальную длину захватываемых данных из тела HTTP-ответа от бэкенда.

--------------------------------------------------------------------------------------

Секция "listen" в конфигурационном файле HAProxy используется для настройки прослушивающих портов, на которых HAProxy принимает входящие соединения от клиентов. Эти соединения затем могут быть маршрутизированы на соответствующие frontend и backend секции в зависимости от правил маршрутизации.

-обеспечивают гибкую настройку прослушивающих портов в HAProxy, включая настройку балансировки нагрузки, таймаутов соединения, опций протокола и маршрутизации запросов на соответствующие backend-серверы.
-дополняют возможности настройки и управления прослушивающими портами в HAProxy, обеспечивая дополнительные функции и опции для оптимизации работы сетевых соединений и обработки трафика.
-предоставляют дополнительные возможности для оптимизации и управления сетевыми соединениями и трафиком на прослушивающем порту HAProxy.
-предоставляют еще больше возможностей для настройки поведения прослушивающих портов HAProxy в зависимости от требований и особенностей конкретного приложения или сетевой инфраструктуры.
-предоставляют дополнительные инструменты и опции для настройки и управления поведением прослушивающих портов в HAProxy в соответствии с конкретными требованиями и потребностями сетевого приложения или сервиса.
-дополняют возможности настройки и управления поведением прослушивающих портов в HAProxy, позволяя адаптировать его функциональность под конкретные требования вашего приложения или сервиса.
-обеспечивают дополнительные возможности для оптимизации производительности и эффективной передачи данных между клиентами и серверами в секции "listen" конфигурационного файла HAProxy.
-добавляют еще больше гибкости и возможностей для настройки работы прослушиваемых портов в HAProxy в соответствии с требованиями вашего приложения или сервиса.

bind: Определяет IP-адрес и порт, на котором HAProxy будет прослушивать входящие соединения.
mode: Устанавливает режим работы для прослушивающего сокета (например, tcp, http).
balance: Определяет метод балансировки нагрузки между backend-серверами.
option: Устанавливает опции для прослушивающего сокета.
timeout client: Устанавливает таймаут для соединения с клиентом.
timeout server: Устанавливает таймаут для соединения с сервером backend.
option forwardfor: Включает добавление заголовка X-Forwarded-For для передачи реального IP-адреса клиента.
option http-server-close: Закрывает соединение с клиентом после завершения каждого HTTP-запроса.
option httpclose: Закрывает соединение с клиентом после завершения каждого HTTP-запроса.
default_backend: Определяет backend, который будет использоваться по умолчанию для обработки запросов, если ни одно из условий ACL не соответствует.
acl: Позволяет определить списки управления доступом (Access Control Lists), используемые для маршрутизации запросов на разные backend в зависимости от условий, таких как IP-адрес клиента, заголовки запроса и другие параметры.
use_backend: Маршрутизирует запросы на указанный backend в зависимости от условий ACL.
option tcplog: Включает логирование TCP-соединений для прослушивающего сокета.
option contstats: Включает сбор статистики по прослушивающему сокету для использования в статусной странице HAProxy.
option http-tunnel: Позволяет использовать туннелирование HTTP-соединений через прокси.
option splice-auto: Активирует автоматическое использование функции splice для оптимизации производительности передачи данных между клиентом и сервером.
option splice-request: Активирует использование функции splice для оптимизации производительности передачи данных только для запросов от клиента к серверу.
option splice-response: Активирует использование функции splice для оптимизации производительности передачи данных только для ответов от сервера к клиенту.
option tcpka: Включает поддержку Keep-Alive соединений для TCP-соединений.
option tcp-check: Включает проверку доступности серверов с использованием TCP-соединений.
maxconn: Определяет максимальное количество одновременных соединений, которые HAProxy будет принимать на прослушивающем сокете.
log: Определяет формат и местоположение журнала для логирования событий, связанных с прослушивающим сокетом.
option tcp-smart-accept: Позволяет HAProxy интеллектуально выбирать между режимом балансировки и режимом прозрачного прокси, учитывая нагрузку.
option tcp-smart-connect: Позволяет HAProxy интеллектуально выбирать между режимом балансировки и режимом прозрачного прокси, учитывая нагрузку.
option splice-pipelined-request: Активирует использование функции splice для оптимизации производительности передачи данных для конвейерных запросов от клиента к серверу.
option splice-pipelined-response: Активирует использование функции splice для оптимизации производительности передачи данных для конвейерных ответов от сервера к клиенту.
option splice-request-chunked: Активирует использование функции splice для оптимизации производительности передачи данных для частей запросов от клиента к серверу.
option splice-response-chunked: Активирует использование функции splice для оптимизации производительности передачи данных для частей ответов от сервера к клиенту.
maxconnrate: Определяет максимальную скорость установления новых соединений на прослушивающем сокете.
rate-limit sessions: Определяет максимальное количество одновременных сессий, которые могут быть установлены на прослушивающем сокете.
rate-limit sessions: Определяет максимальное количество сессий в секунду, которое может быть установлено на прослушивающем сокете.
rate-limit errors: Определяет максимальное количество ошибок в секунду, которое будет разрешено на прослушивающем сокете.
option nolinger: Отключает задержку перед закрытием соединения после отправки данных.
log global: Указывает использовать глобальные настройки логирования для данной секции.
log-format: Определяет формат журнала для данной секции.
log-tag: Устанавливает тег для журнала данной секции.
timeout http-keep-alive: Устанавливает таймаут для HTTP Keep-Alive соединений.
timeout http-request: Устанавливает таймаут для получения HTTP-запроса от клиента.
timeout http-accept: Устанавливает таймаут для принятия HTTP-запроса от клиента.
timeout queue: Устанавливает таймаут ожидания в очереди перед принятием соединения.
option http-buffer-request: Включает буферизацию HTTP-запросов перед отправкой на сервер.
timeout tunnel: Устанавливает таймаут для туннельных соединений.
timeout client-fin: Устанавливает таймаут для завершения соединения с клиентом.
timeout server-fin: Устанавливает таймаут для завершения соединения с сервером.
timeout check: Устанавливает таймаут для проверки доступности серверов в проверках на доступность.
option tcp-check: Включает проверку доступности серверов с использованием TCP-соединений.
option smtpchk: Включает проверку доступности серверов по протоколу SMTP.
option mysql-check: Включает проверку доступности серверов по протоколу MySQL.
option ldap-check: Включает проверку доступности серверов по протоколу LDAP.
option redis-check: Включает проверку доступности серверов по протоколу Redis.
option ssl-hello-chk: Использует SSL Client Hello для проверки доступности SSL бэкенд-серверов.
option pgsql-check: Включает проверку доступности серверов по протоколу PostgreSQL.
option external-check: Включает внешнюю проверку доступности серверов с помощью внешней программы.
option httpchk: Включает HTTP-проверку доступности серверов.
http-check expect: Устанавливает ожидаемый HTTP-код ответа для успешной проверки доступности серверов.
http-check disable-on-404: Отключает сервер, если он возвращает HTTP-код 404 на запрос проверки доступности.
option tcp-smart-connect: Определяет поведение HAProxy в отношении принятия новых соединений.
option tcp-smart-accept: Определяет поведение HAProxy в отношении принятия новых соединений.
option tcp-smart-connect: Определяет поведение HAProxy при установке новых соединений, интеллектуально выбирая между режимом балансировки и режимом прозрачного прокси, учитывая текущую нагрузку.
option tcp-smart-accept: Определяет поведение HAProxy при принятии новых соединений, интеллектуально выбирая между режимом балансировки и режимом прозрачного прокси, учитывая текущую нагрузку.
option originalto: Сохраняет оригинальный IP-адрес клиента при использовании прозрачного прокси.
option accept-invalid-http-request: Позволяет HAProxy принимать недействительные HTTP-запросы от клиентов.
option accept-invalid-http-response: Позволяет HAProxy принимать недействительные HTTP-ответы от бэкенд-серверов.
option prefer-last-server: Предпочитает отправку запросов на последний сервер, который успешно обработал предыдущий запрос клиента.
option forceclose: Закрывает соединение с клиентом после завершения каждого HTTP-запроса, независимо от заголовка Connection.
option dontlognull: Не регистрирует в журнале запросы без содержимого.
option http-ignore-probes: Игнорирует запросы на проверку доступности серверов.
option http-ignore-tunnel: Игнорирует запросы на установку туннеля.
option http-ignore-tunnel-error: Игнорирует ошибки при установке туннеля.
option splice-auto: Автоматически выбирает использование функции splice для оптимизации производительности передачи данных между клиентом и сервером.
option splice-request: Активирует использование функции splice для оптимизации производительности передачи данных только для запросов от клиента к серверу.
option splice-response: Активирует использование функции splice для оптимизации производительности передачи данных только для ответов от сервера к клиенту.
option splice-pipelined-request: Активирует использование функции splice для оптимизации производительности передачи данных для конвейерных запросов от клиента к серверу.
option splice-pipelined-response: Активирует использование функции splice для оптимизации производительности передачи данных для конвейерных ответов от сервера к клиенту.
option splice-request-chunked: Активирует использование функции splice для оптимизации производительности передачи данных для частей запросов от клиента к серверу.
option splice-response-chunked: Активирует использование функции splice для оптимизации производительности передачи данных для частей ответов от сервера к клиенту.
option splice-stream: Активирует использование функции splice для оптимизации производительности передачи данных для потокового режима работы.
option splice-response-to-client: Позволяет использовать функцию splice для оптимизации передачи данных только для ответов от сервера к клиенту.
option splice-auto-tune: Активирует автоматическую настройку параметров splice для оптимальной производительности.
option tcplog-if-no-conn: Позволяет выводить записи в журнал только в случае отсутствия активных соединений на прослушиваемом порту.
option tcpka-probe: Позволяет использовать keepalive-сообщения для проверки доступности сервера.
option tcp-smart-connect-cache: Кэширует информацию о состоянии соединений для более эффективного маршрутизирования новых запросов.
option forceclose-frontend: Закрывает соединение с клиентом сразу после отправки ответа сервером, игнорируя указания клиента о продолжении соединения.
option original-pool: Позволяет сохранять оригинальный пул подключений при передаче запроса на другой сервер.
rate-limit sessions: Устанавливает максимальное количество сессий в секунду для данного прослушиваемого порта.
rate-limit errors: Устанавливает максимальное количество ошибок в секунду для данного прослушиваемого порта.
option tcp-check expect: Определяет ожидаемый ответ от сервера при проверке доступности серверов с использованием TCP-проверок.
option tcp-check send: Определяет данные, отправляемые в качестве запроса при проверке доступности серверов с использованием TCP-проверок.
option tcp-check connect: Определяет метод установки соединения при проверке доступности серверов с использованием TCP-проверок.
option mysql-check user: Устанавливает имя пользователя для проверки доступности серверов по протоколу MySQL.
option mysql-check password: Устанавливает пароль для проверки доступности серверов по протоколу MySQL.
option mysql-check database: Устанавливает имя базы данных для проверки доступности серверов по протоколу MySQL.
option mysql-check query: Устанавливает SQL-запрос для проверки доступности серверов по протоколу MySQL.
option mysql-check fail: Устанавливает SQL-запрос, который будет считаться неудачным при проверке доступности серверов по протоколу MySQL.
option ldap-check binddn: Устанавливает DN (Distinguished Name) для привязки при проверке доступности серверов по протоколу LDAP.
option ldap-check bindpw: Устанавливает пароль для привязки при проверке доступности серверов по протоколу LDAP.
option redis-check info: Устанавливает команду INFO для проверки доступности серверов по протоколу Redis.
option redis-check healthcheck: Устанавливает команду HEALTHCHECK для проверки доступности серверов по протоколу Redis.
option smtpchk hello: Определяет приветственное сообщение при проверке доступности серверов по протоколу SMTP.
option smtpchk rcpt: Определяет адрес получателя при проверке доступности серверов по протоколу SMTP.
option ldap-check version: Устанавливает версию LDAP протокола при проверке доступности серверов по протоколу LDAP.
option ldap-check timeout: Устанавливает таймаут для операции проверки доступности серверов по протоколу LDAP.
option ldap-check base: Устанавливает базовый DN (Distinguished Name) для поиска при проверке доступности серверов по протоколу LDAP.
option ldap-check scope: Устанавливает область поиска при проверке доступности серверов по протоколу LDAP.
option ldap-check bindas: Устанавливает тип привязки при проверке доступности серверов по протоколу LDAP.
option ldap-check bindexact: Устанавливает точное совпадение имени пользователя при привязке при проверке доступности серверов по протоколу LDAP.
option ldap-check binddefault: Устанавливает имя пользователя по умолчанию при привязке при проверке доступности серверов по протоколу LDAP.
option ldap-check binddn-format: Устанавливает формат DN (Distinguished Name) при привязке при проверке доступности серверов по протоколу LDAP.
option ldap-check attr: Устанавливает атрибут, который должен быть проверен при проверке доступности серверов по протоколу LDAP.
option ldap-check match: Устанавливает ожидаемое значение атрибута при проверке доступности серверов по протоколу LDAP.
option ldap-check bind-notempty: Устанавливает требование наличия имени пользователя и пароля при привязке при проверке доступности серверов по протоколу LDAP.
...

-------------------------------------------------------------------------------------------

Секция userlist в конфигурационном файле HAProxy используется для определения пользователей и их аутентификационных данных, которые могут быть использованы для ограничения доступа к различным частям HAProxy, таким как фронтенды или бэкенды, с использованием базовой HTTP-аутентификации.

Вот перечень параметров, которые могут присутствовать в секции userlist:

group <group_name> users ...: Определяет группы пользователей и связанных с ними пользователей.
user <username> insecure-password <password> [groups <group_name>] [password <encrypted_password>]: Определяет пользователя и его пароль. Пароль может быть указан как в открытом виде (небезопасно), так и в виде хэшированного значения.
group <group_name> ...: Определяет группу пользователей.
user <username> ...: Определяет пользователя.
group <group_name> gid <group_id>: Устанавливает числовой идентификатор (GID) для группы пользователей.
user <username> uid <user_id>: Устанавливает числовой идентификатор (UID) для пользователя.
user <username> password <encrypted_password>: Устанавливает зашифрованный пароль для пользователя.
user <username> insecure-password <password>: Устанавливает небезопасный пароль для пользователя (используется только для тестирования).
user <username> password <encrypted_password> groups <group_name> ...: Определяет пользователя и связывает его с одной или несколькими группами.
user <username> insecure-password <password> groups <group_name> ...: Определяет пользователя с небезопасным паролем и связывает его с одной или несколькими группами.
group <group_name> gid <group_id> uid <user_id>: Устанавливает числовой идентификатор (GID) и идентификатор пользователя (UID) для группы пользователей.
user <username> gid <group_id> uid <user_id>: Устанавливает числовой идентификатор (GID) и идентификатор пользователя (UID) для конкретного пользователя.
user <username> group <group_name>: Назначает пользователя определенной группе.
user <username> disable: Отключает пользователя, предотвращая его аутентификацию.
group <group_name> disable: Отключает группу пользователей, предотвращая аутентификацию всех пользователей в этой группе.
user <username> insecure-passwd <password> groups <group_name> ...: Определяет пользователя с небезопасным паролем и связывает его с одной или несколькими группами.
user <username> password <encrypted_password> insecure-passwd <password> groups <group_name> ...: Определяет пользователя с зашифрованным и небезопасным паролями и связывает его с одной или несколькими группами.
group <group_name> level <level>: Устанавливает уровень доступа для группы пользователей. Уровень доступа может использоваться для определения прав доступа к различным частям HAProxy.
user <username> level <level>: Устанавливает уровень доступа для конкретного пользователя.
user <username> password <encrypted_password> level <level>: Определяет пользователя с зашифрованным паролем и устанавливает для него уровень доступа.
group <group_name> timeout <timeout>: Устанавливает таймаут для аутентификации пользователей в группе.
user <username> timeout <timeout>: Устанавливает таймаут для аутентификации конкретного пользователя.
group <group_name> maxconn <max_connections>: Устанавливает максимальное количество одновременных соединений для пользователей в группе.
user <username> maxconn <max_connections>: Устанавливает максимальное количество одновременных соединений для конкретного пользователя.
group <group_name> servers <server_names>: Связывает группу пользователей с определенными серверами (например, бэкендами), к которым у них есть доступ.
user <username> servers <server_names>: Связывает конкретного пользователя с определенными серверами (например, бэкендами), к которым у него есть доступ.
...

-----------------------------------------------------------------------------------


Секция peers в конфигурационном файле HAProxy используется для настройки параметров и определения параметров кластера peer. Этот кластер используется для обмена состоянием между разными экземплярами HAProxy, что позволяет им работать в режиме высокой доступности и обеспечивать отказоустойчивость.

Вот перечень параметров, которые могут присутствовать в секции peers:

peer <peer_name> <peer_address> [port <peer_port>] [weight <peer_weight>] [check inter <check_interval>] [fall <fall_count>] [rise <rise_count>] [fastinter <fast_check_interval>] [downinter <down_check_interval>]: Определяет параметры для каждого узла кластера peer. Включает адрес и порт узла, его вес, интервалы проверок и другие параметры.
bind <bind_address>:<bind_port>: Устанавливает адрес и порт, на котором будет прослушиваться HAProxy для обмена сообщениями состояния с другими узлами кластера peer.
id <peer_id>: Устанавливает идентификатор узла в кластере peer. Необходим для обмена состоянием между узлами.
peers <peer_group_name>: Определяет группу узлов кластера peer, с которой будет обмениваться состоянием текущий узел.
statefile <state_file_path>: Устанавливает путь к файлу, в котором будет сохраняться состояние текущего узла для возможности восстановления после перезапуска.
timeout <timeout_value>: Устанавливает таймаут для обмена сообщениями состояния между узлами кластера peer.
version <version_number>: Устанавливает версию протокола для обмена сообщениями состояния между узлами кластера peer.
bind-process <process_number>: Указывает процесс HAProxy, который будет прослушивать адрес и порт для обмена сообщениями состояния с другими узлами кластера peer.
peers <peer_group_name> maxconn <max_connections>: Устанавливает максимальное количество одновременных соединений для обмена сообщениями состояния с группой узлов кластера peer.
peers <peer_group_name> auth <username>:<password>: Устанавливает аутентификационные данные для доступа к группе узлов кластера peer.
peers <peer_group_name> ca-file <ca_certificate_file>: Указывает путь к файлу корневого сертификата для проверки подлинности узлов кластера peer.
peers <peer_group_name> crt <certificate_file>: Указывает путь к файлу SSL-сертификата для использования в качестве идентификационного сертификата для узлов кластера peer.
peers <peer_group_name> verify <verify_level>: Устанавливает уровень проверки подлинности для узлов кластера peer.
peers <peer_group_name> ciphers <cipher_list>: Устанавливает список шифров, которые могут использоваться для обмена сообщениями состояния с группой узлов кластера peer.
peers <peer_group_name> ca-ignore-err all: Игнорирует все ошибки проверки сертификата CA при подключении к узлам кластера peer.
peers <peer_group_name> ca-ignore-err expired: Игнорирует ошибки истечения срока действия сертификата CA при подключении к узлам кластера peer.
peers <peer_group_name> ca-ignore-err not-authorized: Игнорирует ошибки авторизации сертификата CA при подключении к узлам кластера peer.
...

--------------------------------------------------------------------------------























