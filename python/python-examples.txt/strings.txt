=================================================================
https://docs.python.org/release/3.10.4/tutorial/introduction.html
-----------------------------------------------------------------
###String methods

len(): Get the length of a string.
str.lower(), str.upper(): Convert to lowercase or uppercase.
str.strip(): Remove leading and trailing whitespaces.
str.split(): Split a string into a list of substrings.
str.join(): Join elements of a sequence into a string.

sentence = "   Python Programming is FUN!   "
length = len(sentence)
lower_case = sentence.lower()
stripped_sentence = sentence.strip()
words = sentence.split()
joined_sentence = ' '.join(words)

print(length)             # Output: 33
print(lower_case)         # Output: "   python programming is fun!   "
print(stripped_sentence)  # Output: "Python Programming is FUN!"
print(words)              # Output: ['Python', 'Programming', 'is', 'FUN!']
print(joined_sentence)    # Output: "Python Programming is FUN!"
-----------------------------------------------------------------
### Strings Examples

# Concatenation (`+`):
string1 = "Hello, "
string2 = "World!"
result = string1 + string2
print(result)  # Output: "Hello, World!"

# Repetition (`*`):
string3 = "abc" * 3
print(string3)  # Output: "abcabcabc"

# Membership (`in` and `not in`):
sentence = "This is a sample sentence."
print("sample" in sentence)  # Output: True
print("Python" not in sentence)  # Output: True
------------------------------------------------------------------
Strings

>>> 'spam eggs'  # single quotes
'spam eggs'
>>> 'doesn\'t'  # use \' to escape the single quote...
"doesn't"
>>> "doesn't"  # ...or use double quotes instead
"doesn't"
>>> '"Yes," they said.'
'"Yes," they said.'
>>> "\"Yes,\" they said."
'"Yes," they said.'
>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'

>>> '"Isn\'t," they said.'
'"Isn\'t," they said.'
>>> print('"Isn\'t," they said.')
"Isn't," they said.
>>> s = 'First line.\nSecond line.'  # \n means newline
>>> s  # without print(), \n is included in the output
'First line.\nSecond line.'
>>> print(s)  # with print(), \n produces a new line
First line.
Second line.

>>> print('C:\some\name')  # here \n means newline!
C:\some
ame
>>> print(r'C:\some\name')  # note the r before the quote
C:\some\name

print("""\
Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to
""")
produces the following output (note that the initial newline is not included):

Usage: thingy [OPTIONS]
     -h                        Display this usage message
     -H hostname               Hostname to connect to

>>> # 3 times 'un', followed by 'ium'
>>> 3 * 'un' + 'ium'
'unununium'

>>> 'Py' 'thon'
'Python'

>>> text = ('Put several strings within parentheses '
...         'to have them joined together.')
>>> text
'Put several strings within parentheses to have them joined together.'

------------------------------------------------
This only works with two literals though, not with variables or expressions:
>>> prefix = 'Py'
>>> prefix 'thon'  # can't concatenate a variable and a string literal
  File "<stdin>", line 1
    prefix 'thon'
                ^
SyntaxError: invalid syntax
>>> ('un' * 3) 'ium'
  File "<stdin>", line 1
    ('un' * 3) 'ium'
                   ^
SyntaxError: invalid syntax
If you want to concatenate variables or a variable and a literal, use +:

>>>
>>> prefix + 'thon'
'Python'
------------------------------------------------

>>> word = 'Python'
>>> word[0]  # character in position 0
'P'
>>> word[5]  # character in position 5
'n'
>>> word[-1]  # last character
'n'
>>> word[-2]  # second-last character
'o'
>>> word[-6]
'P'
Note that since -0 is the same as 0, negative indices start from -1.


>>> word = 'Python'
>>> word[0:2]  # characters from position 0 (included) to 2 (excluded)
'Py'
>>> word[2:5]  # characters from position 2 (included) to 5 (excluded)
'tho'

>>> word[:2]   # character from the beginning to position 2 (excluded)
'Py'
>>> word[4:]   # characters from position 4 (included) to the end
'on'
>>> word[-2:]  # characters from the second-last (included) to the end
'on'

>>> word[:2] + word[2:]
'Python'
>>> word[:4] + word[4:]
'Python'

 +---+---+---+---+---+---+
 | P | y | t | h | o | n |
 +---+---+---+---+---+---+
 0   1   2   3   4   5   6
-6  -5  -4  -3  -2  -1

>>> word[42]  # the word only has 6 characters
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
IndexError: string index out of range
However, out of range slice indexes are handled gracefully when used for slicing:

>>> word[4:42]
'on'
>>> word[42:]
''

Python strings cannot be changed â€” they are immutable. Therefore, assigning to an indexed position in the string results in an error:

>>> word[0] = 'J'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
>>> word[2:] = 'py'
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: 'str' object does not support item assignment
If you need a different string, you should create a new one:

>>> 'J' + word[1:]
'Jython'
>>> word[:2] + 'py'
'Pypy'

>>> s = 'supercalifragilisticexpialidocious'
>>> len(s)
34
