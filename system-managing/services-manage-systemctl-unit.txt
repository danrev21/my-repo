Управление службами (https://losst.pro/upravlenie-sluzhbami-linux?featurl=1)

  Systemd - система инициализации позволяет запускать службы параллельно, и порядок запуска служб определяет сложное дерево зависимостей. 
  После запуска Systemd собирает весь вывод службы в лог, и следит за ее работой, если служба аварийно завершилась, то автоматически ее перезапускает при необходимости.
  Служба в Systemd описывается файлом юнита, в нем описано каким образом эту службу надо запускать, а также как с ней себя вести. 
-------------------------------------------------------------------------  
  Типы юнитов:
  service - обычная служба, программа
  target - группа служб
  automount - точка автоматического монтирования
  device - файл устройства, генерируется на этапе загрузки
  mount - точка монтирования
  path - файл или папка
  scope - внешний процесс
  slice - группа системных служб systemd
  snapshot - сохраненное состояние запущенных служб
  socket - позволяет активировать службу по необходимости.
  
  Ещё у все службы Systemd можно поделить на две группы:
  system - системные службы, запускаемые от имени суперпользователя, файлы таких служб находятся в папке /lib/systemd/system или /usr/lib/systemd/system;
  user - службы, которые с которыми можно взаимодействовать от имени обычного пользователя, их файлы располагаются в /lib/systemd/user или /usr/lib/systemd/user или в домашней папке пользователя $USER/.config/systemd/user.
  
  Кроме того, у Systemd есть задачи (Jobs), они выполняются и видны только когда какой нибудь службе применяется действие, например, запуск или остановка.
------------------------------------------------------------------------ 
  Инструмент для управления службами в Linux - команда systemctl
systemctl опции команда служба служба...
  Основные команды:
  list-units - посмотреть все службы (юниты) которые сейчас загружены в память, аналог опции -t
  list-sockets - посмотреть все сокеты служб, которые сейчас загружены в память
  list-timers - посмотреть список таймеров, загруженных в память
  start - запустить службу linux
  stop - остановить службу linux
  reload - попросить службу перечитать свою конфигурацию из файловой системы
  restart - перезапустить службу
  try-restart - перезапустить службу, только если она запущена
  reload-or-restart - попросить службу обновить свою конфигурацию, если не поддерживается просто выполнить перезапуск службы linux
  isolate - запустить только одну службу вместе с ее зависимостями, все остальные остановить
  kill - отправить сигнал завершения процессу используется вместе с опциями --signal и --kill-who
  clean - удалить все данные, которые касаются указанной службы, сюда входит кэш, логи, данные выполнения
  is-active - проверить запущена ли служба linux
  is-failed - проверить не завершилась ли служба с ошибкой
  status - посмотреть состояние и вывод службы
  show - посмотреть параметры управления службой в Linux
  cat - посмотреть содержимое юнит файла в текстовом виде
  reset-failed - очистить состояние failed для служб, которые завершились с ошибкой
  list-dependencies - посмотреть зависимости службы linux
  list-unit-files - вывести все установленные файлы служб
  enable - добавить службу в автозагрузку
  disable - удалить службу из автозагрузки
  is-enabled - проверить если ли уже служба в автозагрузке
  reenable - сначала выполнить disable потом enable для службы
  list-jobs - все выполняющиеся задачи Systemd.
  snapshot - сохранить состояние служб, чтобы потом восстановить
  daemon-reload - обновить конфигурацию юнитов для всех служб
  mask - сделать юнит недоступным
  unmask - вернуть файл службы linux
  link - добавить юнит файл, который расположен не в стандартной папке для юнитов
  revert - вернуть юнит до состояния по умолчанию
  edit - отредактировать параметры службы не изменяя основной файл юнита.
  
  Основные опции:
  -t, --type - отфильтровать список служб по типу
  --state - отфильтровать список служб по состоянию
  -a, --all - показать все известные службы, даже не запущенные
  -q - минимальный вывод
  --version - версия программы
  --no-pager - не использовать постраничную навигацию
  --no-legend - не выводить подробное описание
--------------------------------------------------------------------------
# системные службы, запускаемые от имени суперпользователя:
systemctl list-units --type service
systemctl list-units --type service --state running
systemctl list-units --type service --state failed

# показать службы работающие от имени обычного пользователя:
systemctl --user list-unit-files --type service
systemctl --user status dbus.service    

# для того чтобы посмотреть все службы необходимо обратиться к файлам
# юнитов, потому что далеко не все службы загружаются в память:
systemctl list-unit-files

# в первой колонке выводится добавлен ли юнит в автозагрузку,
# а во второй должен ли он быть добавлен в автозагрузку по умолчанию

# отфильтруем только службы Linux:
systemctl list-unit-files --type service

systemctl list-unit-files 'mysql*'

sudo systemctl start nginx.service
# расширение service можно опустить, оно и так подставляется по умолчанию:
sudo systemctl stop nginx

# можете остановить несколько сервисов:
sudo systemctl stop 'php*.service'

# Для полной перезагрузки Nginx
sudo systemctl restart nginx

# попросить программу перечитать свою конфигурацию:
sudo systemctl reload nginx
# в случае ошибки:
sudo systemctl reload-or-restart nginx

sudo systemctl status nginx
# в конце 10 последних строчек вывода программы, которые могут помочь
# проблему с запуском если она возникнет. Если этих данных вам не
# достаточно:
sudo systemctl status --lines=50 avahi-daemon

# В некоторых случаях строка может обрезаться по размеру окна терминала.
# Для того чтобы этого избежать используйте опцию -l:
sudo systemctl status -l nginx

sudo systemctl enable nginx
sudo systemctl disable nginx
----------------------------------------------------------------------
  РЕДАКТИРОВАНИЕ 
  
  Иногда возникает необходимость отредактировать файл службы. Например, для того чтобы добавить дополнительные переменные окружения или настроить автоматический перезапуск. Но редактировать сам файл сервиса в папке /usr/lib или /lib не желательно, поскольку при следующем обновлении пакета он будет перезаписан.
  Вы можете скопировать файл юнита в папку /etc/systemd/system/ и редактировать его там. Специально для таких случаев была разработана команда edit. Если её использовать с опцией --full она создаст файл в папке /etc/systemd/* в котором вы можете изменять всё что вам нужно. Например, вы можете выполнить следующую команду для того чтобы отредактировать конфигурационный файл Nginx:
  
sudo systemctl edit --full nginx


  Если же вы выполните команду edit без опции --full, то будет создана папка /etc/systemd/system/nginx.service.d, в которой появится файл override.conf. Здесь нужно разместить только параметры, которые вы хотите добавить или значения которых нужно переопределить:

sudo systemctl edit nginx
# add needed line

# После внесения изменений необходимо обновить конфигурацию Systemd:
sudo systemctl daemon-reload
------------------------------------------------------------------
  УДАЛЕНИЕ
  
  Удалить службу можно удалив пакет, вместе с которым она поставляется. Однако если это стандартная служба, то это сделать не получится. Существует способ отключать юниты, если вы не хотите чтобы кто-то их использовал. Это маскировка. Для этого используйте команду mask:
  
sudo systemctl mask nginx

Эта команда создает в папке /etc/systemd/system символическую ссылку на /dev/null с именем файла службы, после чего служба считается отключённой. Обратите внимание, что если вы редактировали файл юнита и в папке /etc/systemd/system уже существует его файл, то вы можете получить ошибку Failed to mask unit: File /etc/systemd/system/*.service already exists. В таком случае все ваши изменения нужно удалить командой revert. При выполнении этой команды ваши изменения будут удалены. Например:

sudo systemctl revert nginx
sudo systemctl status nginx

# Для того чтобы вернуть всё как было выполните команду unmask:
sudo systemctl unmask nginx

------------------------------------------------------------------------








  
  
  
