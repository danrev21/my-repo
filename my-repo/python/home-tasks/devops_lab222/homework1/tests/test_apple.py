from unittest import TestCase
from mock import patch

from parameterized import parameterized
import apple


class TestApple(TestCase):

    @parameterized.expand([
        ("-1", ("Столько нет",)),
        ("0", ("Пожалуйста,", 0, "яблок")),
        ("1", ("Пожалуйста,", 1, "яблоко")),
        ("2", ("Пожалуйста,", 2, "яблока")),
        ("3", ("Пожалуйста,", 3, "яблока")),
        ("4", ("Пожалуйста,", 4, "яблока")),
        ("5", ("Пожалуйста,", 5, "яблок")),
        ("6", ("Пожалуйста,", 6, "яблок")),
        ("7", ("Пожалуйста,", 7, "яблок")),
        ("8", ("Пожалуйста,", 8, "яблок")),
        ("9", ("Пожалуйста,", 9, "яблок")),
        ("10", ("Пожалуйста,", 10, "яблок")),
        ("11", ("Пожалуйста,", 11, "яблок")),
        ("12", ("Пожалуйста,", 12, "яблок")),
        ("13", ("Пожалуйста,", 13, "яблок")),
        ("14", ("Пожалуйста,", 14, "яблок")),
        ("15", ("Пожалуйста,", 15, "яблок")),
        ("16", ("Пожалуйста,", 16, "яблок")),
        ("17", ("Пожалуйста,", 17, "яблок")),
        ("18", ("Пожалуйста,", 18, "яблок")),
        ("19", ("Пожалуйста,", 19, "яблок")),
        ("20", ("Пожалуйста,", 20, "яблок")),
        ("21", ("Пожалуйста,", 21, "яблоко")),
        ("22", ("Пожалуйста,", 22, "яблока")),
        ("23", ("Пожалуйста,", 23, "яблока")),
        ("24", ("Пожалуйста,", 24, "яблока")),
        ("25", ("Пожалуйста,", 25, "яблок")),
        ("26", ("Пожалуйста,", 26, "яблок")),
        ("27", ("Пожалуйста,", 27, "яблок")),
        ("28", ("Пожалуйста,", 28, "яблок")),
        ("29", ("Пожалуйста,", 29, "яблок")),
        ("30", ("Пожалуйста,", 30, "яблок")),
        ("31", ("Столько нет",)),
    ])
    @patch('builtins.input')
    def test_main(self, num, expected, input_mock):
        input_mock.return_value = num
        with patch('builtins.print') as print_mock:
            apple.main()
            print_mock.assert_called_with(*expected)
